manifest {
  description = 'ieQTL mapping pipeline'
  author = 'Dasha Zhernakova'
  nextflowVersion = '>=20.07.1'
  version = '0.1'
  mainScript = 'InteractionAnalysis.nf'
}

params {
  outdir = '.results/'
  custom_config_version = 'master'
  tracedir = "${params.outdir}/pipeline_info"
  imagedir = "/groups/umcg-fg/tmp04/projects/eqtlgen-phase2/interactions/singularity_img/"

  // Defaults only, expecting to be overwritten
  max_memory = 10.GB
  max_cpus = 16
  max_time = 240.h
}

includeConfig 'conf/base.config'

singularity.enabled = true
singularity.autoMounts = true
singularity.cacheDir = "${params.imagedir}"


profiles {
    standard {
        process.executor = 'local'
    }
    slurm { includeConfig 'conf/slurm.config'}
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

env {
    SINGULARITY_TMPDIR="/tmp"
}


process {
    container = "file://${params.imagedir}/wp3_extended_v2.sif"
    containerOptions = "--no-home"
    withName: 'IeQTLmapping|IeQTLmapping_InteractionCovariates|ConvertIeQTLsToText' {
      //container = "file://${imagedir}/limixApr24.simg"
      container = "${params.imagedir}/limixAug24.A.sif"
      containerOptions = "--no-home --bind ${params.imagedir}/Limix_TMP/"
    }   
}

/*
timeline {
  enabled = true
  file = "${params.tracedir}/nf-core/InteractionAnalysis_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/nf-core/InteractionAnalysis_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/nf-core/InteractionAnalysis_trace.txt"
  overwrite = true
}
dag {
  enabled = true
  file = "${params.tracedir}/nf-core/InteractionAnalysis_dag.svg"
}
*/

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

